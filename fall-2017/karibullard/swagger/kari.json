{
  "swagger": "2.0",
  "info": {
    "description": "API for a task application | Designed fall 2017 for AD420",
    "version": "1.0.0",
    "title": "Kari Bullard | Cloud-Dev Hands-On",
    "contact": {
      "email": "kari.e.bullard@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "tags": [
    {
      "name": "users",
      "description": "Operations to perform on users"
    },
    {
      "name": "tasks",
      "description": "Operations to perform on tasks"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get all users",
        "description": "Returns all users in the system",
        "operationId": "getAllUsers",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "all users returned successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "503": {
            "description": "server error - unable to return all users"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Add a new user",
        "description": "Adds a new user to the system",
        "operationId": "addUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "newUser",
            "description": "user object to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully added new user",
            "schema": {
              "type": "integer"
            }
          },
          "400": {
            "description": "invalid input"
          },
          "503": {
            "description": "server error - unable to add new user"
          }
        }
      }
    },
    "/users/{userID}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get user by id",
        "description": "",
        "operationId": "getUserByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "id of user",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "user found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "invalid input"
          },
          "404": {
            "description": "user id not found"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a user",
        "description": "",
        "operationId": "updateUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "id of user",
            "required": true,
            "type": "integer"
          },
          {
            "name": "user",
            "in": "body",
            "description": "id of user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user updated successfully"
          },
          "404": {
            "description": "unable to find user"
          },
          "405": {
            "description": "invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "description": "delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "user deleted"
          },
          "404": {
            "description": "user not found"
          }
        }
      }
    },
    "/users/{userID}/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get all tasks for user",
        "description": "",
        "operationId": "getAllTasks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID for user whose tasks you want",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "found task",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task"
              }
            }
          },
          "404": {
            "description": "task not found"
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Add a task",
        "description": "",
        "operationId": "addTask",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "description": "id of user",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "tasks",
            "description": "task to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "task added successfully"
          },
          "404": {
            "description": "unable to find user"
          },
          "405": {
            "description": "invalid input"
          }
        }
      }
    },
    "/users/{userID}/tasks/{taskID}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get a single task",
        "description": "",
        "operationId": "getTaskByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "user ID",
            "required": true,
            "type": "integer"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "task ID",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "task object",
            "schema": {
              "$ref": "#/definitions/Task"
            }
          },
          "404": {
            "description": "invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Update a task",
        "description": "Update a user task",
        "operationId": "updateTask",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "description": "User ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "taskID",
            "description": "Task ID",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "task",
            "description": "the updated task object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Task"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "task updated"
          },
          "404": {
            "description": "invalid input"
          },
          "405": {
            "description": "task not found"
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a task",
        "description": "Delete a user's task",
        "operationId": "deleteTask",
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "user id for task owner",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "taskID",
            "in": "path",
            "description": "id of task",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "task deleted"
          },
          "400": {
            "description": "invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "userID"
      ],
      "properties": {
        "userID": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "firstName": {
          "type": "string",
          "example": "Kari"
        },
        "lastName": {
          "type": "string",
          "example": "Bullard"
        },
        "tasks": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "Int32"
          }
        }
      }
    },
    "Task": {
      "type": "object",
      "required": [
        "taskId"
      ],
      "properties": {
        "taskId": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "dueDate": {
          "type": "string",
          "format": "date"
        },
        "title": {
          "type": "string",
          "example": "Do some HW"
        },
        "status": {
          "type": "boolean",
          "default": false
        },
        "userID": {
          "type": "integer",
          "format": "int64",
          "example": "kbullard"
        }
      }
    }
  }
}
